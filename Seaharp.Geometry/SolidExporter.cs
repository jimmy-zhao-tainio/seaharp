using System;
using System.Collections.Generic;
using System.Globalization;
using System.IO;
using System.Linq;

namespace Seaharp.Geometry;

public static class SolidExporter
{
    public static void WriteObj(Solid solid, string path)
    {
        if (solid is null)
        {
            throw new ArgumentNullException(nameof(solid));
        }

        var directory = Path.GetDirectoryName(path);
        if (!string.IsNullOrEmpty(directory))
        {
            Directory.CreateDirectory(directory);
        }

        var boundaryTriangles = solid.BoundaryTriangles().ToList();
        var vertexLookup = new Dictionary<Point, int>();
        var vertices = new List<Point>();

        var factor = solid.Unit.ToMillimetersFactor();
        using var writer = new StreamWriter(path);
        writer.WriteLine("# Generated by Seaharp.Geometry");
        writer.WriteLine("# Unit: " + solid.Unit.Abbreviation());

        foreach (var triangle in boundaryTriangles)
        {
            foreach (var point in triangle.Vertices)
            {
                if (!vertexLookup.ContainsKey(point))
                {
                    vertexLookup[point] = vertices.Count + 1;
                    vertices.Add(point);
                }
            }
        }

        foreach (var vertex in vertices)
        {
            writer.WriteLine(
                string.Format(
                    CultureInfo.InvariantCulture,
                    "v {0} {1} {2}",
                    vertex.X * factor,
                    vertex.Y * factor,
                    vertex.Z * factor));
        }

        foreach (var triangle in boundaryTriangles)
        {
            var indices = triangle.Vertices.Select(v => vertexLookup[v]);
            writer.WriteLine($"f {string.Join(" ", indices)}");
        }
    }

}
